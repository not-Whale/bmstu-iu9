(define (any? pred? xs)
  (define (iter ys count)
    (if (null? ys)
        (> count 0)
        (if (pred? (car xs))
            (iter (cdr ys) (+ count 1))
            (iter (cdr ys) count))))
  (iter xs 0))

(define (all? pred? xs)
  (define (iter ys count)
    (if (null? ys)
        (= count (length xs))
        (if (pred? (car xs))
            (iter (cdr ys) (+ count 1))
            (iter (cdr ys) count))))
  (iter xs 0))

(any? odd? '(1 3 5 7)) 
(any? odd? '(1 1 2 3)) 
(any? odd? '(0 2 4 6)) 
(any? odd? '()) 

(all? odd? '(1 3 5 7)) 
(all? odd? '(0 1 2 3)) 
(all? odd? '(0 2 4 6)) 
(all? odd? '())