(define (intersperse1 e xs)
  (define (iter count)
    (if (null? xs)
        '()
        (if (> count (- (length xs) 2))
            (cons (list-ref xs (- (length xs) 1)) '())
            (cons (list-ref xs count) (cons e (iter (+ count 1)))))))
  (iter 0))

(define (intersperse2 e xs)
  (define (iter count)
    (if (> count (- (length xs) 1))
        '()
        (cons (list-ref xs count)
              (if (= count (- (length xs) 1))
                  (iter (+ count 1))
                  (cons e (iter (+ count 1)))))))
  (iter 0))

(intersperse1 'x '(1 2 3 4)) 
(intersperse1 'x '(1 2))   
(intersperse1 'x '(1))       
(intersperse1 'x '())

(intersperse2 'x '(1 2 3 4)) 
(intersperse2 'x '(1 2))   
(intersperse2 'x '(1))       
(intersperse2 'x '())  

