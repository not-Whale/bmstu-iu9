(define (list-head xs n)
  (reverse (list-tail (reverse xs) (- (length xs) n))))

(define (ref-list xs n)
  (if  (and (list? xs) (> (length xs) n))
       (list-ref xs n)
       (if (and (vector? xs) (> (vector-length xs) n))
           (vector-ref xs n)
           (and (and (string? xs) (> (string-length xs) n))
                (string-ref xs n)))))

(define (ins-list xs n k) 
  (if (list? xs)
      (if (> (length xs) n)
          (append (list-head xs n) k (list-tail xs n))
          (and (= (length xs) n)
               (cons xs k)))
      (if (vector? xs)
          (if (> (vector-length xs) n)
              (list->vector (append (list-head (vector->list xs) n) k (list-tail (vector->list xs) n)))
              (and (= (vector-length xs) n)
                   (list->vector (cons (vector->list xs) k))))
          (if (string? xs)
              (if (and (> (string-length xs) n)
                       (char? (list-ref (append (list-head (string->list xs) n)
                                                k
                                                (list-tail (string->list xs) n)) n)))
                  (list->string (append (list-head (string->list xs) n)
                                        k
                                        (list-tail (string->list xs) n)))
                  (and (and (= (string-length xs) n)
                            (char? (list-ref (append (list-head (string->list xs) n)
                                                     k
                                                     (list-tail (string->list xs) n)) n)))
                       (list->string (append (string->list xs) k))))))))

(define (ref . p)
  (if (= (length p) 2)
      (ref-list (car p) (cdr p))
      (ins-list (car p) (car (cdr p)) (cdr (cdr p)))))


(ref '(1 2 3) 1 0) 
(ref #(1 2 3) 1 0)
(ref #(1 2 3) 1 #\0)
(ref "123" 1 #\0)
(ref "123" 1 0)
(ref "123" 3 #\4)
(ref "123" 5 #\4)
